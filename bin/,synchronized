#!/bin/sh

synchronized() (
    if [ $# -lt 2 ]; then
        cat <<-EOF
		
		Usage: %0 KEY COMMAND...
		
		Makes sure only one command runs at a time, given KEY.
		Blocks until done if another command is already running.
		
		EOF
        exit 1
    fi
    tmp="${TMPDIR:-/tmp}"
    lockdir="${tmp%/}/synclock$1"
    pipe="${tmp%/}/syncpipe$1"
    shift
    while true; do
        if mkdir "$lockdir" 2>/dev/null; then
            (
              mkfifo "$pipe"
              <"$pipe" &  # ensure 1+ readers so write in trap doesn't hang
              trap 'trap - INT EXIT TERM; rm -rf "$lockdir"; >"$pipe"; rm "$pipe"' \
                           INT EXIT TERM
              "$@"
            )
            return $?
        else
            (
              <"$pipe" & pid1=$!
              (sleep 0.1 || sleep 1; kill $pid1) & pid2=$!
              wait $pid1 || true
              kill $pid2 || true
            ) >/dev/null 2>&1
        fi
    done
)

sourced=0
if [ -n "$ZSH_VERSION" ]; then 
  case $ZSH_EVAL_CONTEXT in *:file) sourced=1;; esac
elif [ -n "$KSH_VERSION" ]; then
  [ "$(cd -- "$(dirname -- "$0")" && pwd -P)/$(basename -- "$0")" != "$(cd -- "$(dirname -- "${.sh.file}")" && pwd -P)/$(basename -- "${.sh.file}")" ] && sourced=1
elif [ -n "$BASH_VERSION" ]; then
  (return 0 2>/dev/null) && sourced=1 
else # All other shells: examine $0 for known shell binary filenames.
  # Detects `sh` and `dash`; add additional shell filenames as needed.
  case ${0##*/} in sh|-sh|dash|-dash) sourced=1;; esac
fi # https://stackoverflow.com/a/28776166/3573263

if [ $sourced -eq 0 ]; then
    synchronized "$@"
fi
